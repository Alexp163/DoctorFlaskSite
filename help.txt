1. main.py app.py view.py models.py forms.py config.py db.py - базовая структура проекта
2. Создание папки templates (находится в той же папке, что и app.py)
3. Импортирование render_temlate во views.py для отдачи html-шаблонов
4. <a href='{{ url_for("index") }}'>Главная</a> - создание динамических ссылок на каждую страницу
5. Создание блоков на jinja {% block ' название блока'    %} {% endblock %}
6. Наследование от главного шаблона {% extends ' название шаблона' %}
7. в файле app.py изменение пути к папке templates(template_folder="../templates")
8. создание в папке templates папки include с малыми страничками(main_menu.html
    и menu_doctor.html) и подключением их через {{ super() }}
9. Создание динамической страницы one_doctor.html для каждого доктора, с подключением во view.py
10. Устанавливаем sqlalchemy(pip install flask_sqlalchemy)
11. pip freeze>requirements.txt
12. Прописываем путь в папке db.py
(app.config["SQLALCHEMY_DATABASE_URL"] = "sqlite:///slite.db"
db = SQLAlchemy(app))
13. Создаем таблицу с параметрами доктора(комментарий в начале файла models.py)
14. Создание моделей:
    - добавляем класс в models.py (класс наследуем от db.Model)
------------------------------------------------------------
1) Сделали view для одного доктора
2) Вызвали Doctor.query.get(1) для
3) Передали doctor в контекст запроса, чтобы внутри шаблона к нему обратиться
4) Внутри шаблона расписали все поля для доктора
5) Добавили параметр пути <int:doctor_id> (так же добавили в аргументы функции) чтобы доставать доктора из базы динамически
6) Добавили ссылки url_for('one_doctor', doctor_id=d.id) для создания динамических ссылок
------------------------------------------------------------------------------------------------
1) Добавить repr всем моделям и проверить рабостособность с помощью отдельного файла db_test.py
2) Проверить filter_by, сделать группировку по группам
---------------------------------------------------------------------------------------------
1. Добавить динамическую обработку списка из групп с помощью цикла
2. Добавить отдельную страничку для одной группы
3. Добавить view с одной группой, всеми группами (для списка) и всеми услугами, которые относятся к этой группе (выбрать по id)
-----------------------------------------------
pip install flask-admin
1. Добавить admin.py
2. Перенести конфигурацию в config.py и добавить загрузку этого конфига в app.py
3. Добавить в конфиг секретный ключ
4. Зарегистрировать все модели в админ панели
5. Добавить несколько записей через админ панель
-----------------------------------------------------------------------------------------------------------
1) Удалить из файла db_run.py строчки с удалением базы данных (db.drop_all())
2) Убрать db_run.py
3) Установить пакет Flask-Migrate, реализующий миграции для базы данных
4) Добавить объект migrate в db.py
5) Перейти в папку src(cd src)
5-1)создать папку __init__.py
5-2) Поменять полезные импорты в во всех файлах с приставкой src.
Команды для миграции:
flask db init  -  инициализация (делается один раз за все время для проекта)
flask db migrate  - создать миграцию
flask db upgrade - применить миграцию
flask run - запуск сервера
или
$ flask db stamp head
$ flask db migrate
$ flask db upgrade
6) Добавить файл конфигурации проекта .flaskenv и добавить в него указание, где находится файл с app
FLASK_APP=app.py
7) Добавить импорты в файл __init__.py всех полезных модулей
